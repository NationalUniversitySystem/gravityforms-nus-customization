{"version":3,"sources":["functions/utility.js","functions/validation.js","components/submit-button.js","components/degree-select.js","components/country.js","components/live-validation.js","components/military-tooltip.js","nus-gravity-forms.js"],"names":["hasClass","el","className","classList","contains","RegExp","test","addClass","add","removeClass","remove","replace","setActiveClass","document","querySelectorAll","forEach","element","fieldInput","querySelector","value","fieldSelect","validateName","input","message","arguments","length","undefined","fieldValid","fieldNotValid","validateEmail","validatePhone","language","countryCode","regex","errorMessage","concat","validatePhoneStrict","isFieldValid","validateZip","errorDescription","validateZipViaUSPS","requestXML","axios","method","timeout","url","then","response","status","Error","statusText","window","DOMParser","parseFromString","data","innerHTML","populateZipRelatedFields","catch","error","validateZipViaDB","NuAjaxObject","ajax_url","Qs","stringify","action","zipValue","success","form","closest","state","stateInput","getAttribute","parentNode","jQuery","tooltip","setAttribute","runValidation","event","target","d","addEventListener","console","log","trackInput","id","startsWith","formElement","getElementById","submitElement","iconElement","$","modifyPrograms","program","degreeSelect","degree","repeat","ajax","type","programs","prop","find","appendTo","val","append","on","this","children","filter","text","e","formId","attr","html","isoCodeField","countryNameField","selectedCountry","isoCode","countryName","zipcodeWrapper","phone","template","container","currentMonth","date","getMonth","currentYear","getFullYear","monthSelects","yearSelects","fieldWrappers","dispatchEvent","Event","gformFields","gformInput"],"mappings":"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","file":"nus-gravity-forms.min.js","sourcesContent":["/* eslint-disable no-unused-vars */\nfunction hasClass( el, className ) {\n\treturn el.classList ? el.classList.contains( className ) : new RegExp( '\\\\b' + className + '\\\\b' ).test( el.className );\n}\n\nfunction addClass( el, className ) {\n\tif ( el.classList ) {\n\t\tel.classList.add( className );\n\t} else if (\t! hasClass( el, className ) ) {\n\t\tel.className += ' ' + className;\n\t}\n}\n\nfunction removeClass( el, className ) {\n\tif ( el.classList ) {\n\t\tel.classList.remove( className );\n\t} else {\n\t\tel.className = el.className.replace( new RegExp( '\\\\b' + className + '\\\\b', 'g' ), '' );\n\t}\n}\n\n/**\n * Re-Usable check for setting form labels to active state\n *\n * Loops through all fields and checks for value, if value, sets form field to active via class\n */\nfunction setActiveClass() {\n\tvar fieldWrappers = document.querySelectorAll( '.gform_fields li:not(.col-wrapper)' );\n\n\tfieldWrappers.forEach( function( element ) {\n\t\tvar fieldInput = element.querySelector( 'input' );\n\t\tif ( fieldInput && fieldInput.value ) {\n\t\t\taddClass( element, 'form__group--active' );\n\t\t}\n\n\t\tvar fieldSelect = element.querySelector( 'select' );\n\t\tif ( fieldSelect && fieldSelect.value ) {\n\t\t\taddClass( element, 'form__group--active' );\n\t\t}\n\t} );\n}\n","/* eslint-disable no-unused-vars, complexity */\n/* global NuAjaxObject, Qs, axios  */\n\n/**\n * Validate First & Last Name\n *\n * Only letters and hyphens.\n */\nfunction validateName( input, language = 'english' ) {\n\tconst regex = /^[A-Za-z, .-]+$/i;\n\tconst message = 'english' === language ? '<span>Please enter a valid name.</span> Must contains only letters and hyphens.' : '<span>Por favor introduzca un nombre válido.</span> Debe contener solo letras y guiones.';\n\n\tif ( input.value.length > 1 && regex.test( input.value ) ) {\n\t\tfieldValid( input );\n\t} else {\n\t\tfieldNotValid( input, message );\n\t}\n}\n\n/**\n * Validate Email Address\n *\n * Allow any # of letters, followed by '@', followed by at least 2 letters,\n * followed by '.' and then 3 letters.\n */\nfunction validateEmail( input, language = 'english' ) {\n\tconst regex = /^\\w+([+.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\n\tconst message = 'english' === language ? '<span>Please enter a valid email address.</span> e.g.: example@website.com' : '<span>Por favor, introduzca una dirección de correo electrónico válida.</span> ej.: ejemplo@website.com';\n\n\tif ( input.value.length > 1 && regex.test( input.value ) ) {\n\t\tfieldValid( input );\n\t} else {\n\t\tfieldNotValid( input, message );\n\t}\n}\n\n/**\n * Validate Phone #\n *\n * Only a formatted phone number (e.g. +1-555-555-5555, 555-555-5555, 55555555555).\n */\nfunction validatePhone( input, language = 'english' ) {\n\tconst countryCode = document.querySelector( '.nus-live-validation--country select' );\n\tconst message = 'english' === language ? '<span>Please enter a valid phone number.</span>' : '<span>Por favor introduzca un número de teléfono válido.</span>';\n\n\t// Default is if not USA country code, then remove char limit of 10\n\tlet regex = /^(\\+?1-?)?(\\([2-9]([02-9]\\d|1[02-9])\\)|[2-9]([02-9]\\d|1[02-9]))-?[2-9]([02-9]\\d|1[02-9])-?\\d{4,15}$/;\n\tlet errorMessage = 'english' === language ? 'Only digits, hyphens, and spaces.' : 'Solo dígitos, guiones y espacios';\n\n\t// If the country code is set to USA ( 1 ), then check for a 10 digit number with only numbers.\n\tif ( countryCode === null || countryCode.value === '1' ) {\n\t\tregex = /^(\\+?1-?)?(\\([2-9]([02-9]\\d|1[02-9])\\)|[2-9]([02-9]\\d|1[02-9]))-?[2-9]([02-9]\\d|1[02-9])-?\\d{4}$/;\n\t\terrorMessage = 'english' === language ? 'Only 10 digits, hyphens, and spaces.' : 'Solo 10 dígitos, guiones y espacios';\n\t}\n\n\tif ( input.value.length > 0 && regex.test( input.value ) ) {\n\t\tfieldValid( input );\n\t} else {\n\t\tfieldNotValid( input, `${ message } ${ errorMessage }` );\n\t}\n}\n\n/**\n * A more strict phone number validation that does not allow any characters other than digits\n *\n * @param {DOM element} input\n */\nfunction validatePhoneStrict( input, language = 'english' ) {\n\tconst countryCode = document.querySelector( '.country-code--select select' );\n\tlet isFieldValid  = true;\n\tlet message = 'english' === language ? '<span>Please enter a valid phone number.</span>' : '<span>Por favor introduzca un número de teléfono válido</span>';\n\n\tif ( ! input.value ) {\n\t\tisFieldValid = false;\n\t\tfieldNotValid( input, message );\n\t} else if ( countryCode && '' !== countryCode.value ) {\n\t\tif ( '1' === countryCode.value && ! /^\\d{10}$|^$/.test( input.value ) ) {\n\t\t\tisFieldValid = false;\n\t\t\tfieldNotValid( input, `${ message } Please enter 10 digits.` );\n\t\t} else if ( ! input.value || ! /^\\d{5,}$|^$/.test( input.value ) ) {\n\t\t\tisFieldValid = false;\n\t\t\tfieldNotValid( input, message );\n\t\t}\n\t} else if ( ! /^\\d{10}$|^$/.test( input.value ) ) {\n\t\tisFieldValid = false;\n\t\tfieldNotValid( input, message );\n\t}\n\n\t// Decide if a specific message should be used.\n\tif ( false === isFieldValid && /[^0-9]/.test( input.value ) ) {\n\t\tfieldNotValid( input, `${ message } No special characters allowed.` );\n\t}\n\n\tif ( isFieldValid ) {\n\t\tfieldValid( input );\n\t}\n}\n\n/**\n * Validate Zip Code\n *\n * Only allow 5 numbers.\n */\nfunction validateZip( input, language = 'english' ) {\n\tconst regex = /^\\d{5}$/;\n\tconst message = 'english' === language ? 'Please enter a valid zip' : 'Por favor introduzca un código postal válido.';\n\tconst errorDescription = 'english' === language ? '5 digits, numbers only' : '5 dígitos, solo números.';\n\n\tif ( ! regex.test( input.value ) ) {\n\t\tfieldNotValid( input, `<span>${ message }</span> ${ errorDescription }` );\n\t} else if ( input.value === '00000' ) {\n\t\tfieldValid( input );\n\t} else {\n\t\tvalidateZipViaUSPS( input, message );\n\t}\n}\n\n/**\n * Validate the ZIP through USPS API\n *\n * @param {DOM element} input\n *\n * @return {boolean|object|Error}\n */\nfunction validateZipViaUSPS( input, message ) {\n\tconst uspsApiUrl = 'https://secure.shippingapis.com/ShippingApi.dll?API=CityStateLookup&XML=';\n\tconst requestXML = `<CityStateLookupRequest USERID=\"951NATIO1026\"><ZipCode ID=\"0\"><Zip5>${ input.value }</Zip5></ZipCode></CityStateLookupRequest>`;\n\n\taxios( {\n\t\tmethod: 'get',\n\t\ttimeout: 750,\n\t\turl: uspsApiUrl + requestXML\n\t} ).then( response => {\n\t\tif ( response.status !== 200 ) {\n\t\t\tthrow new Error( response.statusText );\n\t\t}\n\n\t\treturn new window.DOMParser().parseFromString( response.data, 'text/xml' );\n\t} ).then( data => {\n\t\tif ( data.querySelector( 'Error' ) ) {\n\t\t\tconst errorDescription = data.querySelector( 'Description' ).innerHTML;\n\n\t\t\tfieldNotValid( input, `<span>${ message }.</span> ${ errorDescription }` );\n\t\t} else {\n\t\t\tfieldValid( input );\n\t\t\tpopulateZipRelatedFields( data, input );\n\t\t}\n\t} ).catch( error => {\n\t\t// If the response fails, timesout, etc. then try to do a request in our backup DB.\n\t\tvalidateZipViaDB( input, message );\n\t} );\n}\n\n/**\n * Fallback zip code check in our WP DB incase the USPS service is not available or times out\n *\n * @param {DOM element} input\n */\nfunction validateZipViaDB( input, message ) {\n\taxios( {\n\t\tmethod: 'post',\n\t\turl: NuAjaxObject.ajax_url,\n\t\tdata: Qs.stringify( {\n\t\t\taction: 'zip_lookup',\n\t\t\tzipValue: input.value\n\t\t} )\n\t} ).then( response => {\n\t\t// If our DB was not reached.\n\t\tif ( response.status !== 200 ) {\n\t\t\tthrow new Error( response.statusText );\n\t\t} else if ( ! response.data.success ) {\n\t\t\tthrow new Error( response.data.data );\n\t\t}\n\n\t\tfieldValid( input );\n\t\tpopulateZipRelatedFields( response.data.data, input );\n\t} ).catch( error => {\n\t\tfieldNotValid( input, `<span>${ message }.</span> ${ error.message }` );\n\t} );\n}\n\nfunction populateZipRelatedFields( data, input ) {\n\tconst form = input.closest( 'form' );\n\tlet state = '';\n\tif ( typeof data.state !== 'undefined' ) {\n\t\tstate = data.state;\n\t} else if ( data.querySelector( 'State' ) ) {\n\t\tstate = data.querySelector( 'State' ).innerHTML;\n\t}\n\n\tif ( state && form ) {\n\t\tconst stateInput = form.querySelector( '.gfield.state input' );\n\n\t\tif ( stateInput && stateInput.getAttribute( 'type' ) === 'hidden' ) {\n\t\t\tstateInput.value = state;\n\t\t}\n\t}\n}\n\n/**\n * JS to run if field comes back valid\n *\n * Remove the error class if it exists, then add our success class,\n * finally kill the error tooltip.\n */\nfunction fieldValid( input ) {\n\tif ( input.parentNode.classList.contains( 'gfield_error' ) ) {\n\t\tinput.parentNode.classList.remove( 'gfield_error' );\n\t}\n\tinput.parentNode.classList.add( 'gfield_correct' );\n\tjQuery( '.gfield_correct [data-toggle=\"tooltip\"]' ).tooltip( 'dispose' );\n}\n\n/**\n * JS to run if field comes back NOT valid\n *\n * Remove the correct class if it exists, then add our error class.\n */\nfunction fieldNotValid( input, message ) {\n\t// Remove the correct class if it exists, then add our error class.\n\tinput.parentNode.classList.remove( 'gfield_correct' );\n\tinput.parentNode.classList.add( 'gfield_error' );\n\n\t// Set the attributes to show the error tooltip, show the tooltip.\n\tinput.setAttribute( 'data-toggle', 'tooltip' );\n\tinput.setAttribute( 'data-html', 'true' );\n\tinput.setAttribute( 'title', message );\n\tinput.setAttribute( 'data-placement', 'top' );\n\tinput.setAttribute( 'data-original-title', message );\n\tinput.setAttribute( 'data-template', '<div class=\"tooltip tooltip--error\" role=\"tooltip\"><div class=\"arrow\"></div><div class=\"tooltip-inner\"></div></div>' );\n\tjQuery( '.gfield_error [data-toggle=\"tooltip\"]:focus' ).tooltip( 'show' );\n\n}\n\n/**\n * JS to perform the actual validation on our inputs\n *\n * Used within event listener functions.\n */\nfunction runValidation( event ) {\n\tif ( null === event.target.parentNode ) {\n\t\treturn;\n\t}\n\n\tconst classList = event.target.parentNode.classList;\n\tconst langAttribute = document.querySelector( 'html' ).getAttribute( 'lang' );\n\tconst language = 'es' === langAttribute ? 'spanish' : 'english';\n\n\tif ( classList.contains( 'nus-live-validation--name' ) ) {\n\t\tvalidateName( event.target, language );\n\t} else if ( classList.contains( 'nus-live-validation--email' ) ) {\n\t\tvalidateEmail( event.target, language );\n\t} else if ( classList.contains( 'nus-live-validation--phone' ) ) {\n\t\tvalidatePhone( event.target, language );\n\t} else if ( classList.contains( 'nus-live-validation--phone-strict' ) ) {\n\t\tvalidatePhoneStrict( event.target, language );\n\t} else if ( classList.contains( 'nus-live-validation--zip' ) ) {\n\t\tvalidateZip( event.target, language );\n\t}\n}\n","( function( d ) {\n\t/**\n\t * Adds spinning icon to submit button\n\t *\n\t * Changes submit button icon class to add a rotating spinner so user knows something is happening\n\t */\n\n\t// When click the form submit button, if the hidden track input is empty, set the value of the default RFI form\n\td.addEventListener( 'click', function( event ) {\n\t\tif ( event.target && event.target.closest( '.gform_footer button' ) ) {\n\t\t\tconsole.log( event.target.closest( 'form' ) );\n\n\t\t\tconst trackInput = event.target.closest( 'form' ).querySelector( 'li.track input' );\n\t\t\tif ( trackInput && '' === trackInput.value ) {\n\t\t\t\ttrackInput.value = 'rfi_nu.edu';\n\t\t\t}\n\t\t}\n\t} );\n\n\t/**\n\t * Disable the submit button on forms submission to prevent duplicate submissions\n\t * - Gravity Forms are dynamically generated\n\t * - Not using jQuery so we can limit our dependency on it.\n\t * - Backwards compatability for submit button in the footer of the form OR the input[type=\"submit\"] of native GravityForms functionality.\n\t */\n\td.addEventListener( 'submit', function( event ) {\n\t\tif ( event.target && event.target.id.startsWith( 'gform' ) ) {\n\t\t\tconst formElement   = d.getElementById( event.target.id );\n\t\t\tconst submitElement = formElement.querySelector( 'input[type=\"submit\"]' ) || formElement.querySelector( '.gform_footer button' );\n\t\t\tconst iconElement = submitElement.querySelector( '.icon--arrow-right' );\n\n\t\t\tsubmitElement.setAttribute( 'disabled', 'disabled' );\n\n\t\t\tif ( iconElement ) {\n\t\t\t\ticonElement.classList.remove( 'icon--arrow-right' );\n\t\t\t\ticonElement.classList.add( 'icon--spin' );\n\t\t\t}\n\t\t}\n\t} );\n} )( document, jQuery );\n","/* global NuAjaxObject, degreeSelect, setActiveClass */\n( function( window, document, $ ) {\n\t$( function() {\n\t\t// Var used by optimizely. If set to true, will create a change in how\n\t\t// the programs are displayed in the ajax function degreeSelect().\n\t\tvar modifyPrograms;\n\n\t\t/**\n\t\t* Re-usable Ajax function for our degree types select\n\t\t*\n\t\t* Based on the value of the degree type select, we need to populate our degree program select with the corresponding options.\n\t\t* It accepts two parameters, \"degree\" which is the value of the degree type select, and \"repeat\", which modifies some actions\n\t\t* on success, since we may not want to completely remove all the options every time.\n\t\t*/\n\t\twindow.degreeSelect = function( degree, repeat, modifyPrograms ) {\n\t\t\t// Begin our ajax call\n\t\t\t$.ajax( {\n\t\t\t\ttype: 'POST',\n\t\t\t\turl: NuAjaxObject.ajax_url,\n\t\t\t\tdata: {\n\t\t\t\t\tdegree: degree,\n\t\t\t\t\tmodifyPrograms: modifyPrograms,\n\t\t\t\t\taction: 'degree_select'\n\t\t\t\t},\n\t\t\t\tsuccess: function( programs ) { // The WP PHP AJAX action returns a list of programs as a string.\n\n\t\t\t\t\t// Enable the select after populated\n\t\t\t\t\t$( '.program--select select' ).prop( 'disabled', false );\n\n\t\t\t\t\t// Make it so user knows it's ready\n\t\t\t\t\t$( '.program--select' ).removeClass( 'disabled' );\n\n\t\t\t\t\tswitch ( repeat ) {\n\n\t\t\t\t\t\t// First time\n\t\t\t\t\t\tcase 'initial':\n\n\t\t\t\t\t\t\t// Remove all previously added programs as options from \"Degree Program\" select\n\t\t\t\t\t\t\t$( '.program--select select' ).find( 'option:not([disabled=\"disabled\"])' ).remove();\n\n\t\t\t\t\t\t\t// Add all of our program posts as options to the \"Degree Program\" select\n\t\t\t\t\t\t\t$( programs ).appendTo( '.program--select select' );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t// Every other time\n\t\t\t\t\t\tcase 'repeat':\n\n\t\t\t\t\t\t\t// Add all of our program posts as options to the \"Degree Program\" select\n\t\t\t\t\t\t\t$( programs ).appendTo( '.program--select select' );\n\n\t\t\t\t\t\t\t// Choose our previously chosen program, before the form re-rendered after failed validation\n\t\t\t\t\t\t\t$( '.program--select select' ).val( program );\n\n\t\t\t\t\t\t\t$( '.country-code--select select' ).val( countryCode );\n\n\t\t\t\t\t\t\tsetActiveClass();\n\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( true === modifyPrograms ) {\n\t\t\t\t\t\t$( '.program--select select' ).append( '<optgroup label=\"\" class=\"d-none\"></optgroup>' );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\t\t};\n\n\t\t/**\n\t\t * Event handler for whenever the Program Type dropdown option is selected\n\t\t *\n\t\t * Gets and sets the program value as a variable for use in our gform_post_render function\n\t\t */\n\t\t// Set global variable\n\t\tvar program;\n\t\tvar countryCode;\n\n\t\t// When a program is selected\n\t\t$( document ).on( 'change', '.program--select select', function() {\n\n\t\t\t// Store that program's value in the variable for use elsewhere\n\t\t\tprogram = $( '.program--select select' ).val();\n\n\t\t} );\n\n\t\t// When a country code is selected\n\t\t$( document ).on( 'change', '.country-code--select', function() {\n\n\t\t\t// Store that value in the variable for use elsewhere\n\t\t\tcountryCode = $( '.country-code--select select' ).val();\n\n\t\t} );\n\n\t\t// Since country code has a pre-selected default, also get the value on load.\n\t\t$( function() {\n\t\t\tcountryCode = $( '.country-code--select select' ).val();\n\t\t} );\n\n\t\t/**\n\t\t * Event handler for whenever the Degree Type dropdown is changed is rendered on the page\n\t\t *\n\t\t * Where all the magic happens.\n\t\t */\n\t\t$( document ).on( 'change', '.degree--select select', function() {\n\n\t\t\t// If body has this class, set the var to true so we can modify the program names.\n\t\t\tif ( $( 'body' ).hasClass( 'modify-true' ) ) {\n\t\t\t\tmodifyPrograms = true;\n\t\t\t}\n\n\t\t\t// Disable the select while ajax is running\n\t\t\t$( '.program--select select' ).prop( 'disabled', true );\n\n\t\t\t// Make it so user knows something is happening\n\t\t\t$( '.program--select' ).addClass( 'disabled' );\n\n\t\t\t// Get the value selected\n\t\t\tvar degree = $( this ).children( 'option' ).filter( ':selected' ).text();\n\n\t\t\t// Remove all previously added programs as options from \"Degree Program\" select\n\t\t\t$( '.program--select select' ).find( 'option:not([disabled=\"disabled\"])' ).remove();\n\n\t\t\t// Call our ajax function\n\t\t\tdegreeSelect( degree, 'initial', modifyPrograms );\n\n\t\t} );\n\n\t\t/**\n\t\t * Event handler for whenever the Gravity Form is rendered on the page\n\t\t *\n\t\t * Allows us to set inputs as active, run our ajax functions, etc.\n\t\t * Especially helpful for returning form code after a failed validation.\n\t\t */\n\t\t$( document ).on( 'gform_post_render', function( e, formId ) {\n\n\t\t\t// Stop form from re-submitting after hitting back button in browser\n\t\t\t$( '#gform_ajax_frame_' + formId ).attr( 'src', 'about:blank' );\n\n\t\t\t// Get the option selected\n\t\t\tvar degree = $( '.degree--select select option:selected' ).val();\n\n\t\t\tdegreeSelect( degree, 'repeat', modifyPrograms );\n\n\t\t\t$( '.gfield_error input, .gfield_error select' ).attr( 'aria-invalid', 'true' );\n\n\t\t\tif ( $( '#gform_wrapper_' + formId ).hasClass( 'gform_validation_error' ) ) {\n\t\t\t\t$( '#gform_' + formId + ' .validation_error' ).html( '<span class=\"heading--four\">There was a problem with your submission.</span> Errors have been highlighted below.' );\n\t\t\t}\n\n\t\t} );\n\n\t} );\n} )( window, document, jQuery );\n","( function( document, $ ) {\n\tvar isoCodeField     = $( '.iso-country-code input, input.iso-country-code' );\n\tvar countryNameField = $( '.country-name input, input.country-name' );\n\tif ( isoCodeField.length || countryNameField.length ) {\n\t\t/**\n\t\t * Event handler for whenever the Country Code dropdown is changed\n\t\t */\n\t\t$( document ).on( 'change', '.country-code--select select', function() {\n\t\t\tvar selectedCountry = $( this ).children( 'option' ).filter( ':selected' );\n\n\t\t\tvar isoCode     = selectedCountry.data( 'iso-country-code' );\n\t\t\tvar countryName = selectedCountry.data( 'country-name' );\n\n\t\t\t// Populate the corresponding fields.\n\t\t\tif ( isoCodeField.length ) {\n\t\t\t\tisoCodeField.val( isoCode );\n\t\t\t}\n\n\t\t\tif ( countryNameField.length ) {\n\t\t\t\tcountryNameField.val( countryName );\n\t\t\t}\n\n\t\t\t// Auto populate the zipcode field if it's another country other than USA.\n\t\t\tvar zipcodeWrapper = $( '.form__group--zip' );\n\t\t\tif ( zipcodeWrapper.length && ( 'US' !== isoCode || 'USA' !== countryName ) ) {\n\t\t\t\tzipcodeWrapper.find( 'input' ).val( '00000' );\n\t\t\t\tzipcodeWrapper.addClass( 'form__group--active' );\n\t\t\t} else if ( zipcodeWrapper.length ) {\n\t\t\t\tzipcodeWrapper.find( 'input' ).val( '' );\n\t\t\t\tzipcodeWrapper.removeClass( 'form__group--active' );\n\t\t\t}\n\t\t} );\n\t}\n} )( document, jQuery );\n","/* global runValidation, validatePhoneStrict */\n\n( () => {\n\n\t// When we type in the 'inputs'.\n\tdocument.addEventListener( 'keyup', ( e ) => {\n\t\trunValidation( e );\n\t} );\n\n\t// When we focus in the 'inputs'.\n\tdocument.addEventListener( 'focus', ( e ) => {\n\t\trunValidation( e );\n\t} );\n\n\t// When we click into the 'inputs'.\n\tdocument.addEventListener( 'click', ( e ) => {\n\t\trunValidation( e );\n\t} );\n\n\t/**\n\t * Updates the phone validation based on country code selected.\n\t */\n\n\t// When a 'select' input is changed.\n\tdocument.addEventListener( 'change', ( e ) => {\n\t\t// Set the phone input as an object.\n\t\tconst phone = document.querySelector( '.nus-live-validation--phone-strict input' );\n\n\t\t// If our country code select was changed, re-run validation on the phone input,\n\t\t// as the validation type is dependant on the country code.\n\t\tif ( e.target.parentNode.classList.contains( 'country-code--select' ) ) {\n\t\t\tvalidatePhoneStrict( phone );\n\t\t}\n\n\t\t// When we select a degree or program, add our valid class to the select.\n\t\tif ( e.target.parentNode.classList.contains( 'degree--select' ) || e.target.parentNode.classList.contains( 'program--select' ) ) {\n\t\t\tif ( e.target.value !== 'undefined' ) {\n\t\t\t\te.target.parentNode.classList.add( 'gfield_correct' );\n\t\t\t} else {\n\t\t\t\te.target.parentNode.classList.remove( 'gfield_correct' );\n\t\t\t}\n\t\t}\n\n\t\t// If we set a program / degree type, AND our dropdown's container class has an error, wipe the error.\n\t\t// Useful because if you hit submit without filling anything out, the degree / program boxes highlight with an error,\n\t\t// but without this snippet won't clear the error after selecting a value.\n\t\tif ( e.target.parentNode.classList.contains( 'degree--select' ) && e.target.parentNode.classList.contains( 'gfield_error' ) ) {\n\t\t\te.target.parentNode.classList.remove( 'gfield_error' );\n\t\t}\n\t} );\n} )();\n","( function( $ ) {\n\t$( function() {\n\t\t$( '[data-tool=\"#military-tooltip\"]' ).tooltip( {\n\t\t\ttemplate: '<div class=\"tooltip tooltip--military\" role=\"tooltip\"><div class=\"arrow\"></div><div class=\"tooltip-inner\"></div></div>',\n\t\t\tcontainer: '.form__group--military'\n\t\t} );\n\t} );\n} )( jQuery );\n","/* eslint-disable no-unused-vars */\nfunction hasClass( el, className ) {\n\treturn el.classList ? el.classList.contains( className ) : new RegExp( '\\\\b' + className + '\\\\b' ).test( el.className );\n}\n\nfunction addClass( el, className ) {\n\tif ( el.classList ) {\n\t\tel.classList.add( className );\n\t} else if (\t! hasClass( el, className ) ) {\n\t\tel.className += ' ' + className;\n\t}\n}\n\nfunction removeClass( el, className ) {\n\tif ( el.classList ) {\n\t\tel.classList.remove( className );\n\t} else {\n\t\tel.className = el.className.replace( new RegExp( '\\\\b' + className + '\\\\b', 'g' ), '' );\n\t}\n}\n\n/**\n * Re-Usable check for setting form labels to active state\n *\n * Loops through all fields and checks for value, if value, sets form field to active via class\n */\nfunction setActiveClass() {\n\tvar fieldWrappers = document.querySelectorAll( '.gform_fields li:not(.col-wrapper)' );\n\n\tfieldWrappers.forEach( function( element ) {\n\t\tvar fieldInput = element.querySelector( 'input' );\n\t\tif ( fieldInput && fieldInput.value ) {\n\t\t\taddClass( element, 'form__group--active' );\n\t\t}\n\n\t\tvar fieldSelect = element.querySelector( 'select' );\n\t\tif ( fieldSelect && fieldSelect.value ) {\n\t\t\taddClass( element, 'form__group--active' );\n\t\t}\n\t} );\n}\n\n/* eslint-disable no-unused-vars, complexity */\n/* global NuAjaxObject, Qs, axios  */\n\n/**\n * Validate First & Last Name\n *\n * Only letters and hyphens.\n */\nfunction validateName( input, language = 'english' ) {\n\tconst regex = /^[A-Za-z, .-]+$/i;\n\tconst message = 'english' === language ? '<span>Please enter a valid name.</span> Must contains only letters and hyphens.' : '<span>Por favor introduzca un nombre válido.</span> Debe contener solo letras y guiones.';\n\n\tif ( input.value.length > 1 && regex.test( input.value ) ) {\n\t\tfieldValid( input );\n\t} else {\n\t\tfieldNotValid( input, message );\n\t}\n}\n\n/**\n * Validate Email Address\n *\n * Allow any # of letters, followed by '@', followed by at least 2 letters,\n * followed by '.' and then 3 letters.\n */\nfunction validateEmail( input, language = 'english' ) {\n\tconst regex = /^\\w+([+.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\n\tconst message = 'english' === language ? '<span>Please enter a valid email address.</span> e.g.: example@website.com' : '<span>Por favor, introduzca una dirección de correo electrónico válida.</span> ej.: ejemplo@website.com';\n\n\tif ( input.value.length > 1 && regex.test( input.value ) ) {\n\t\tfieldValid( input );\n\t} else {\n\t\tfieldNotValid( input, message );\n\t}\n}\n\n/**\n * Validate Phone #\n *\n * Only a formatted phone number (e.g. +1-555-555-5555, 555-555-5555, 55555555555).\n */\nfunction validatePhone( input, language = 'english' ) {\n\tconst countryCode = document.querySelector( '.nus-live-validation--country select' );\n\tconst message = 'english' === language ? '<span>Please enter a valid phone number.</span>' : '<span>Por favor introduzca un número de teléfono válido.</span>';\n\n\t// Default is if not USA country code, then remove char limit of 10\n\tlet regex = /^(\\+?1-?)?(\\([2-9]([02-9]\\d|1[02-9])\\)|[2-9]([02-9]\\d|1[02-9]))-?[2-9]([02-9]\\d|1[02-9])-?\\d{4,15}$/;\n\tlet errorMessage = 'english' === language ? 'Only digits, hyphens, and spaces.' : 'Solo dígitos, guiones y espacios';\n\n\t// If the country code is set to USA ( 1 ), then check for a 10 digit number with only numbers.\n\tif ( countryCode === null || countryCode.value === '1' ) {\n\t\tregex = /^(\\+?1-?)?(\\([2-9]([02-9]\\d|1[02-9])\\)|[2-9]([02-9]\\d|1[02-9]))-?[2-9]([02-9]\\d|1[02-9])-?\\d{4}$/;\n\t\terrorMessage = 'english' === language ? 'Only 10 digits, hyphens, and spaces.' : 'Solo 10 dígitos, guiones y espacios';\n\t}\n\n\tif ( input.value.length > 0 && regex.test( input.value ) ) {\n\t\tfieldValid( input );\n\t} else {\n\t\tfieldNotValid( input, `${ message } ${ errorMessage }` );\n\t}\n}\n\n/**\n * A more strict phone number validation that does not allow any characters other than digits\n *\n * @param {DOM element} input\n */\nfunction validatePhoneStrict( input, language = 'english' ) {\n\tconst countryCode = document.querySelector( '.country-code--select select' );\n\tlet isFieldValid  = true;\n\tlet message = 'english' === language ? '<span>Please enter a valid phone number.</span>' : '<span>Por favor introduzca un número de teléfono válido</span>';\n\n\tif ( ! input.value ) {\n\t\tisFieldValid = false;\n\t\tfieldNotValid( input, message );\n\t} else if ( countryCode && '' !== countryCode.value ) {\n\t\tif ( '1' === countryCode.value && ! /^\\d{10}$|^$/.test( input.value ) ) {\n\t\t\tisFieldValid = false;\n\t\t\tfieldNotValid( input, `${ message } Please enter 10 digits.` );\n\t\t} else if ( ! input.value || ! /^\\d{5,}$|^$/.test( input.value ) ) {\n\t\t\tisFieldValid = false;\n\t\t\tfieldNotValid( input, message );\n\t\t}\n\t} else if ( ! /^\\d{10}$|^$/.test( input.value ) ) {\n\t\tisFieldValid = false;\n\t\tfieldNotValid( input, message );\n\t}\n\n\t// Decide if a specific message should be used.\n\tif ( false === isFieldValid && /[^0-9]/.test( input.value ) ) {\n\t\tfieldNotValid( input, `${ message } No special characters allowed.` );\n\t}\n\n\tif ( isFieldValid ) {\n\t\tfieldValid( input );\n\t}\n}\n\n/**\n * Validate Zip Code\n *\n * Only allow 5 numbers.\n */\nfunction validateZip( input, language = 'english' ) {\n\tconst regex = /^\\d{5}$/;\n\tconst message = 'english' === language ? 'Please enter a valid zip' : 'Por favor introduzca un código postal válido.';\n\tconst errorDescription = 'english' === language ? '5 digits, numbers only' : '5 dígitos, solo números.';\n\n\tif ( ! regex.test( input.value ) ) {\n\t\tfieldNotValid( input, `<span>${ message }</span> ${ errorDescription }` );\n\t} else if ( input.value === '00000' ) {\n\t\tfieldValid( input );\n\t} else {\n\t\tvalidateZipViaUSPS( input, message );\n\t}\n}\n\n/**\n * Validate the ZIP through USPS API\n *\n * @param {DOM element} input\n *\n * @return {boolean|object|Error}\n */\nfunction validateZipViaUSPS( input, message ) {\n\tconst uspsApiUrl = 'https://secure.shippingapis.com/ShippingApi.dll?API=CityStateLookup&XML=';\n\tconst requestXML = `<CityStateLookupRequest USERID=\"951NATIO1026\"><ZipCode ID=\"0\"><Zip5>${ input.value }</Zip5></ZipCode></CityStateLookupRequest>`;\n\n\taxios( {\n\t\tmethod: 'get',\n\t\ttimeout: 750,\n\t\turl: uspsApiUrl + requestXML\n\t} ).then( response => {\n\t\tif ( response.status !== 200 ) {\n\t\t\tthrow new Error( response.statusText );\n\t\t}\n\n\t\treturn new window.DOMParser().parseFromString( response.data, 'text/xml' );\n\t} ).then( data => {\n\t\tif ( data.querySelector( 'Error' ) ) {\n\t\t\tconst errorDescription = data.querySelector( 'Description' ).innerHTML;\n\n\t\t\tfieldNotValid( input, `<span>${ message }.</span> ${ errorDescription }` );\n\t\t} else {\n\t\t\tfieldValid( input );\n\t\t\tpopulateZipRelatedFields( data, input );\n\t\t}\n\t} ).catch( error => {\n\t\t// If the response fails, timesout, etc. then try to do a request in our backup DB.\n\t\tvalidateZipViaDB( input, message );\n\t} );\n}\n\n/**\n * Fallback zip code check in our WP DB incase the USPS service is not available or times out\n *\n * @param {DOM element} input\n */\nfunction validateZipViaDB( input, message ) {\n\taxios( {\n\t\tmethod: 'post',\n\t\turl: NuAjaxObject.ajax_url,\n\t\tdata: Qs.stringify( {\n\t\t\taction: 'zip_lookup',\n\t\t\tzipValue: input.value\n\t\t} )\n\t} ).then( response => {\n\t\t// If our DB was not reached.\n\t\tif ( response.status !== 200 ) {\n\t\t\tthrow new Error( response.statusText );\n\t\t} else if ( ! response.data.success ) {\n\t\t\tthrow new Error( response.data.data );\n\t\t}\n\n\t\tfieldValid( input );\n\t\tpopulateZipRelatedFields( response.data.data, input );\n\t} ).catch( error => {\n\t\tfieldNotValid( input, `<span>${ message }.</span> ${ error.message }` );\n\t} );\n}\n\nfunction populateZipRelatedFields( data, input ) {\n\tconst form = input.closest( 'form' );\n\tlet state = '';\n\tif ( typeof data.state !== 'undefined' ) {\n\t\tstate = data.state;\n\t} else if ( data.querySelector( 'State' ) ) {\n\t\tstate = data.querySelector( 'State' ).innerHTML;\n\t}\n\n\tif ( state && form ) {\n\t\tconst stateInput = form.querySelector( '.gfield.state input' );\n\n\t\tif ( stateInput && stateInput.getAttribute( 'type' ) === 'hidden' ) {\n\t\t\tstateInput.value = state;\n\t\t}\n\t}\n}\n\n/**\n * JS to run if field comes back valid\n *\n * Remove the error class if it exists, then add our success class,\n * finally kill the error tooltip.\n */\nfunction fieldValid( input ) {\n\tif ( input.parentNode.classList.contains( 'gfield_error' ) ) {\n\t\tinput.parentNode.classList.remove( 'gfield_error' );\n\t}\n\tinput.parentNode.classList.add( 'gfield_correct' );\n\tjQuery( '.gfield_correct [data-toggle=\"tooltip\"]' ).tooltip( 'dispose' );\n}\n\n/**\n * JS to run if field comes back NOT valid\n *\n * Remove the correct class if it exists, then add our error class.\n */\nfunction fieldNotValid( input, message ) {\n\t// Remove the correct class if it exists, then add our error class.\n\tinput.parentNode.classList.remove( 'gfield_correct' );\n\tinput.parentNode.classList.add( 'gfield_error' );\n\n\t// Set the attributes to show the error tooltip, show the tooltip.\n\tinput.setAttribute( 'data-toggle', 'tooltip' );\n\tinput.setAttribute( 'data-html', 'true' );\n\tinput.setAttribute( 'title', message );\n\tinput.setAttribute( 'data-placement', 'top' );\n\tinput.setAttribute( 'data-original-title', message );\n\tinput.setAttribute( 'data-template', '<div class=\"tooltip tooltip--error\" role=\"tooltip\"><div class=\"arrow\"></div><div class=\"tooltip-inner\"></div></div>' );\n\tjQuery( '.gfield_error [data-toggle=\"tooltip\"]:focus' ).tooltip( 'show' );\n\n}\n\n/**\n * JS to perform the actual validation on our inputs\n *\n * Used within event listener functions.\n */\nfunction runValidation( event ) {\n\tif ( null === event.target.parentNode ) {\n\t\treturn;\n\t}\n\n\tconst classList = event.target.parentNode.classList;\n\tconst langAttribute = document.querySelector( 'html' ).getAttribute( 'lang' );\n\tconst language = 'es' === langAttribute ? 'spanish' : 'english';\n\n\tif ( classList.contains( 'nus-live-validation--name' ) ) {\n\t\tvalidateName( event.target, language );\n\t} else if ( classList.contains( 'nus-live-validation--email' ) ) {\n\t\tvalidateEmail( event.target, language );\n\t} else if ( classList.contains( 'nus-live-validation--phone' ) ) {\n\t\tvalidatePhone( event.target, language );\n\t} else if ( classList.contains( 'nus-live-validation--phone-strict' ) ) {\n\t\tvalidatePhoneStrict( event.target, language );\n\t} else if ( classList.contains( 'nus-live-validation--zip' ) ) {\n\t\tvalidateZip( event.target, language );\n\t}\n}\n\n( function( d ) {\n\t/**\n\t * Adds spinning icon to submit button\n\t *\n\t * Changes submit button icon class to add a rotating spinner so user knows something is happening\n\t */\n\n\t// When click the form submit button, if the hidden track input is empty, set the value of the default RFI form\n\td.addEventListener( 'click', function( event ) {\n\t\tif ( event.target && event.target.closest( '.gform_footer button' ) ) {\n\t\t\tconsole.log( event.target.closest( 'form' ) );\n\n\t\t\tconst trackInput = event.target.closest( 'form' ).querySelector( 'li.track input' );\n\t\t\tif ( trackInput && '' === trackInput.value ) {\n\t\t\t\ttrackInput.value = 'rfi_nu.edu';\n\t\t\t}\n\t\t}\n\t} );\n\n\t/**\n\t * Disable the submit button on forms submission to prevent duplicate submissions\n\t * - Gravity Forms are dynamically generated\n\t * - Not using jQuery so we can limit our dependency on it.\n\t * - Backwards compatability for submit button in the footer of the form OR the input[type=\"submit\"] of native GravityForms functionality.\n\t */\n\td.addEventListener( 'submit', function( event ) {\n\t\tif ( event.target && event.target.id.startsWith( 'gform' ) ) {\n\t\t\tconst formElement   = d.getElementById( event.target.id );\n\t\t\tconst submitElement = formElement.querySelector( 'input[type=\"submit\"]' ) || formElement.querySelector( '.gform_footer button' );\n\t\t\tconst iconElement = submitElement.querySelector( '.icon--arrow-right' );\n\n\t\t\tsubmitElement.setAttribute( 'disabled', 'disabled' );\n\n\t\t\tif ( iconElement ) {\n\t\t\t\ticonElement.classList.remove( 'icon--arrow-right' );\n\t\t\t\ticonElement.classList.add( 'icon--spin' );\n\t\t\t}\n\t\t}\n\t} );\n} )( document, jQuery );\n\n/* global NuAjaxObject, degreeSelect, setActiveClass */\n( function( window, document, $ ) {\n\t$( function() {\n\t\t// Var used by optimizely. If set to true, will create a change in how\n\t\t// the programs are displayed in the ajax function degreeSelect().\n\t\tvar modifyPrograms;\n\n\t\t/**\n\t\t* Re-usable Ajax function for our degree types select\n\t\t*\n\t\t* Based on the value of the degree type select, we need to populate our degree program select with the corresponding options.\n\t\t* It accepts two parameters, \"degree\" which is the value of the degree type select, and \"repeat\", which modifies some actions\n\t\t* on success, since we may not want to completely remove all the options every time.\n\t\t*/\n\t\twindow.degreeSelect = function( degree, repeat, modifyPrograms ) {\n\t\t\t// Begin our ajax call\n\t\t\t$.ajax( {\n\t\t\t\ttype: 'POST',\n\t\t\t\turl: NuAjaxObject.ajax_url,\n\t\t\t\tdata: {\n\t\t\t\t\tdegree: degree,\n\t\t\t\t\tmodifyPrograms: modifyPrograms,\n\t\t\t\t\taction: 'degree_select'\n\t\t\t\t},\n\t\t\t\tsuccess: function( programs ) { // The WP PHP AJAX action returns a list of programs as a string.\n\n\t\t\t\t\t// Enable the select after populated\n\t\t\t\t\t$( '.program--select select' ).prop( 'disabled', false );\n\n\t\t\t\t\t// Make it so user knows it's ready\n\t\t\t\t\t$( '.program--select' ).removeClass( 'disabled' );\n\n\t\t\t\t\tswitch ( repeat ) {\n\n\t\t\t\t\t\t// First time\n\t\t\t\t\t\tcase 'initial':\n\n\t\t\t\t\t\t\t// Remove all previously added programs as options from \"Degree Program\" select\n\t\t\t\t\t\t\t$( '.program--select select' ).find( 'option:not([disabled=\"disabled\"])' ).remove();\n\n\t\t\t\t\t\t\t// Add all of our program posts as options to the \"Degree Program\" select\n\t\t\t\t\t\t\t$( programs ).appendTo( '.program--select select' );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t// Every other time\n\t\t\t\t\t\tcase 'repeat':\n\n\t\t\t\t\t\t\t// Add all of our program posts as options to the \"Degree Program\" select\n\t\t\t\t\t\t\t$( programs ).appendTo( '.program--select select' );\n\n\t\t\t\t\t\t\t// Choose our previously chosen program, before the form re-rendered after failed validation\n\t\t\t\t\t\t\t$( '.program--select select' ).val( program );\n\n\t\t\t\t\t\t\t$( '.country-code--select select' ).val( countryCode );\n\n\t\t\t\t\t\t\tsetActiveClass();\n\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( true === modifyPrograms ) {\n\t\t\t\t\t\t$( '.program--select select' ).append( '<optgroup label=\"\" class=\"d-none\"></optgroup>' );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\t\t};\n\n\t\t/**\n\t\t * Event handler for whenever the Program Type dropdown option is selected\n\t\t *\n\t\t * Gets and sets the program value as a variable for use in our gform_post_render function\n\t\t */\n\t\t// Set global variable\n\t\tvar program;\n\t\tvar countryCode;\n\n\t\t// When a program is selected\n\t\t$( document ).on( 'change', '.program--select select', function() {\n\n\t\t\t// Store that program's value in the variable for use elsewhere\n\t\t\tprogram = $( '.program--select select' ).val();\n\n\t\t} );\n\n\t\t// When a country code is selected\n\t\t$( document ).on( 'change', '.country-code--select', function() {\n\n\t\t\t// Store that value in the variable for use elsewhere\n\t\t\tcountryCode = $( '.country-code--select select' ).val();\n\n\t\t} );\n\n\t\t// Since country code has a pre-selected default, also get the value on load.\n\t\t$( function() {\n\t\t\tcountryCode = $( '.country-code--select select' ).val();\n\t\t} );\n\n\t\t/**\n\t\t * Event handler for whenever the Degree Type dropdown is changed is rendered on the page\n\t\t *\n\t\t * Where all the magic happens.\n\t\t */\n\t\t$( document ).on( 'change', '.degree--select select', function() {\n\n\t\t\t// If body has this class, set the var to true so we can modify the program names.\n\t\t\tif ( $( 'body' ).hasClass( 'modify-true' ) ) {\n\t\t\t\tmodifyPrograms = true;\n\t\t\t}\n\n\t\t\t// Disable the select while ajax is running\n\t\t\t$( '.program--select select' ).prop( 'disabled', true );\n\n\t\t\t// Make it so user knows something is happening\n\t\t\t$( '.program--select' ).addClass( 'disabled' );\n\n\t\t\t// Get the value selected\n\t\t\tvar degree = $( this ).children( 'option' ).filter( ':selected' ).text();\n\n\t\t\t// Remove all previously added programs as options from \"Degree Program\" select\n\t\t\t$( '.program--select select' ).find( 'option:not([disabled=\"disabled\"])' ).remove();\n\n\t\t\t// Call our ajax function\n\t\t\tdegreeSelect( degree, 'initial', modifyPrograms );\n\n\t\t} );\n\n\t\t/**\n\t\t * Event handler for whenever the Gravity Form is rendered on the page\n\t\t *\n\t\t * Allows us to set inputs as active, run our ajax functions, etc.\n\t\t * Especially helpful for returning form code after a failed validation.\n\t\t */\n\t\t$( document ).on( 'gform_post_render', function( e, formId ) {\n\n\t\t\t// Stop form from re-submitting after hitting back button in browser\n\t\t\t$( '#gform_ajax_frame_' + formId ).attr( 'src', 'about:blank' );\n\n\t\t\t// Get the option selected\n\t\t\tvar degree = $( '.degree--select select option:selected' ).val();\n\n\t\t\tdegreeSelect( degree, 'repeat', modifyPrograms );\n\n\t\t\t$( '.gfield_error input, .gfield_error select' ).attr( 'aria-invalid', 'true' );\n\n\t\t\tif ( $( '#gform_wrapper_' + formId ).hasClass( 'gform_validation_error' ) ) {\n\t\t\t\t$( '#gform_' + formId + ' .validation_error' ).html( '<span class=\"heading--four\">There was a problem with your submission.</span> Errors have been highlighted below.' );\n\t\t\t}\n\n\t\t} );\n\n\t} );\n} )( window, document, jQuery );\n\n( function( document, $ ) {\n\tvar isoCodeField     = $( '.iso-country-code input, input.iso-country-code' );\n\tvar countryNameField = $( '.country-name input, input.country-name' );\n\tif ( isoCodeField.length || countryNameField.length ) {\n\t\t/**\n\t\t * Event handler for whenever the Country Code dropdown is changed\n\t\t */\n\t\t$( document ).on( 'change', '.country-code--select select', function() {\n\t\t\tvar selectedCountry = $( this ).children( 'option' ).filter( ':selected' );\n\n\t\t\tvar isoCode     = selectedCountry.data( 'iso-country-code' );\n\t\t\tvar countryName = selectedCountry.data( 'country-name' );\n\n\t\t\t// Populate the corresponding fields.\n\t\t\tif ( isoCodeField.length ) {\n\t\t\t\tisoCodeField.val( isoCode );\n\t\t\t}\n\n\t\t\tif ( countryNameField.length ) {\n\t\t\t\tcountryNameField.val( countryName );\n\t\t\t}\n\n\t\t\t// Auto populate the zipcode field if it's another country other than USA.\n\t\t\tvar zipcodeWrapper = $( '.form__group--zip' );\n\t\t\tif ( zipcodeWrapper.length && ( 'US' !== isoCode || 'USA' !== countryName ) ) {\n\t\t\t\tzipcodeWrapper.find( 'input' ).val( '00000' );\n\t\t\t\tzipcodeWrapper.addClass( 'form__group--active' );\n\t\t\t} else if ( zipcodeWrapper.length ) {\n\t\t\t\tzipcodeWrapper.find( 'input' ).val( '' );\n\t\t\t\tzipcodeWrapper.removeClass( 'form__group--active' );\n\t\t\t}\n\t\t} );\n\t}\n} )( document, jQuery );\n\n/* global runValidation, validatePhoneStrict */\n\n( () => {\n\n\t// When we type in the 'inputs'.\n\tdocument.addEventListener( 'keyup', ( e ) => {\n\t\trunValidation( e );\n\t} );\n\n\t// When we focus in the 'inputs'.\n\tdocument.addEventListener( 'focus', ( e ) => {\n\t\trunValidation( e );\n\t} );\n\n\t// When we click into the 'inputs'.\n\tdocument.addEventListener( 'click', ( e ) => {\n\t\trunValidation( e );\n\t} );\n\n\t/**\n\t * Updates the phone validation based on country code selected.\n\t */\n\n\t// When a 'select' input is changed.\n\tdocument.addEventListener( 'change', ( e ) => {\n\t\t// Set the phone input as an object.\n\t\tconst phone = document.querySelector( '.nus-live-validation--phone-strict input' );\n\n\t\t// If our country code select was changed, re-run validation on the phone input,\n\t\t// as the validation type is dependant on the country code.\n\t\tif ( e.target.parentNode.classList.contains( 'country-code--select' ) ) {\n\t\t\tvalidatePhoneStrict( phone );\n\t\t}\n\n\t\t// When we select a degree or program, add our valid class to the select.\n\t\tif ( e.target.parentNode.classList.contains( 'degree--select' ) || e.target.parentNode.classList.contains( 'program--select' ) ) {\n\t\t\tif ( e.target.value !== 'undefined' ) {\n\t\t\t\te.target.parentNode.classList.add( 'gfield_correct' );\n\t\t\t} else {\n\t\t\t\te.target.parentNode.classList.remove( 'gfield_correct' );\n\t\t\t}\n\t\t}\n\n\t\t// If we set a program / degree type, AND our dropdown's container class has an error, wipe the error.\n\t\t// Useful because if you hit submit without filling anything out, the degree / program boxes highlight with an error,\n\t\t// but without this snippet won't clear the error after selecting a value.\n\t\tif ( e.target.parentNode.classList.contains( 'degree--select' ) && e.target.parentNode.classList.contains( 'gfield_error' ) ) {\n\t\t\te.target.parentNode.classList.remove( 'gfield_error' );\n\t\t}\n\t} );\n} )();\n\n( function( $ ) {\n\t$( function() {\n\t\t$( '[data-tool=\"#military-tooltip\"]' ).tooltip( {\n\t\t\ttemplate: '<div class=\"tooltip tooltip--military\" role=\"tooltip\"><div class=\"arrow\"></div><div class=\"tooltip-inner\"></div></div>',\n\t\t\tcontainer: '.form__group--military'\n\t\t} );\n\t} );\n} )( jQuery );\n\n\n/* global setActiveClass */\n( function( d ) {\n\t/**\n\t * Default year and month and country for forms\n\t *\n\t * Auto populates month and year selects with current month and year\n\t */\n\n\tvar monthNames = [ 'JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUNE', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC' ];\n\tvar date = new Date();\n\n\t// Get the month number, correspond to our array data\n\tvar currentMonth = monthNames[ date.getMonth() ];\n\n\t// Get the year\n\tvar currentYear = date.getFullYear();\n\n\tvar monthSelects = d.querySelectorAll( '.form__group--month select' );\n\tvar yearSelects = d.querySelectorAll( '.form__group--year select' );\n\n\tif ( monthSelects.length ) {\n\t\tmonthSelects.forEach( function( element ) {\n\t\t\telement.value = currentMonth;\n\t\t\telement.dispatchEvent( new Event( 'change' ) );\n\t\t} );\n\t}\n\n\tif ( yearSelects.length ) {\n\t\tyearSelects.forEach( function( element ) {\n\t\t\telement.value = currentYear;\n\t\t\telement.dispatchEvent( new Event( 'change' ) );\n\t\t} );\n\t}\n\n\t// Check for active fields first, so it doesn't look terrible\n\tsetActiveClass();\n\n\t/**\n\t * Event handler for FireFox autofill form event\n\t *\n\t * Sets labels to active state when form is autofilled by the browser\n\t */\n\tvar gformFields = d.querySelectorAll( '.gform_body input:not(.gform_hidden), .gform_body select:not(.gform_hidden)' );\n\tif ( gformFields.length ) {\n\t\tgformFields.forEach( function( gformInput ) {\n\t\t\tgformInput.addEventListener( 'change', function() {\n\t\t\t\tgformInput.closest( 'li' ).classList.add( 'form__group--active' );\n\t\t\t} );\n\t\t} );\n\t}\n} )( document );\n"]}