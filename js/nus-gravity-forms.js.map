{"version":3,"sources":["components/functions.js","components/submit-button.js","components/degree-select.js","components/country.js","nus-gravity-forms.js"],"names":["hasClass","el","className","classList","contains","RegExp","test","addClass","add","removeClass","remove","replace","setActiveClass","document","querySelectorAll","forEach","element","fieldInput","querySelector","value","fieldSelect","$","on","this","val","jQuery","window","modifyPrograms","program","degreeSelect","degree","repeat","ajax","type","url","NuAjaxObject","ajax_url","data","action","success","programs","prop","find","appendTo","append","children","filter","text","e","formId","attr","isoCodeField","countryNameField","length","selectedCountry","isoCode","countryName","zipcodeWrapper","change","ready","d","Date","y","getFullYear","n","bind","closest"],"mappings":"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","file":"nus-gravity-forms.js","sourcesContent":["/* eslint-disable no-unused-vars */\n/**\n * Utility Classes\n */\n function hasClass( el, className ) {\n\treturn el.classList ? el.classList.contains( className ) : new RegExp( '\\\\b' + className + '\\\\b' ).test( el.className );\n}\n\nfunction addClass( el, className ) {\n\tif ( el.classList ) {\n\t\tel.classList.add( className );\n\t} else if (\t! hasClass( el, className ) ) {\n\t\tel.className += ' ' + className;\n\t}\n}\n\nfunction removeClass( el, className ) {\n\tif ( el.classList ) {\n\t\tel.classList.remove( className );\n\t} else {\n\t\tel.className = el.className.replace( new RegExp( '\\\\b' + className + '\\\\b', 'g' ), '' );\n\t}\n}\n\n/**\n * Re-Usable check for setting form labels to active state\n *\n * Loops through all fields and checks for value, if value, sets form field to active via class\n */\nfunction setActiveClass() {\n\tvar fieldWrappers = document.querySelectorAll( '.gform_fields li' );\n\n\tfieldWrappers.forEach( function( element ) {\n\t\tvar fieldInput = element.querySelector( 'input' );\n\t\tif ( fieldInput && fieldInput.value ) {\n\t\t\taddClass( element, 'form__group--active' );\n\t\t}\n\n\t\tvar fieldSelect = element.querySelector( 'select' );\n\t\tif ( fieldSelect && fieldSelect.value ) {\n\t\t\taddClass( element, 'form__group--active' );\n\t\t}\n\t} );\n}\n","( function( $ ) {\n\t/**\n\t * Adds spinning icon to submit button\n\t *\n\t * Changes submit button icon class to add a rotating spinner so user knows something is happening\n\t */\n\n\t// When click the form submit button\n\t$( document ).on( 'click', '.gform_footer button', function() {\n\n\t\t// Remove the class that shows the arrow\n\t\t$( this ).removeClass( 'icon--arrow-right' );\n\n\t\t// Add the class that shows the spinning icon\n\t\t$( this ).addClass( 'icon--spin' );\n\n\t\t// Get the value of the default RFI form\n\t\tvar trackInput = $( '#gform_1 li.track input' ).val();\n\n\t\t// If the value is empty\n\t\tif ( trackInput === '' ) {\n\n\t\t\t// Set it manually\n\t\t\t$( '#gform_1 li.track input' ).val( 'rfi_nu.edu' );\n\t\t}\n\t} );\n} )( jQuery );\n","/* global NuAjaxObject, degreeSelect, setActiveClass */\n( function( window, document, $ ) {\n\t$( function() {\n\t\t// Var used by optimizely. If set to true, will create a change in how\n\t\t// the programs are displayed in the ajax function degreeSelect().\n\t\tvar modifyPrograms;\n\n\t\t/**\n\t\t* Re-usable Ajax function for our degree types select\n\t\t*\n\t\t* Based on the value of the degree type select, we need to populate our degree program select with the corresponding options.\n\t\t* It accepts two parameters, \"degree\" which is the value of the degree type select, and \"repeat\", which modifies some actions\n\t\t* on success, since we may not want to completely remove all the options every time.\n\t\t*/\n\t\twindow.degreeSelect = function( degree, repeat, modifyPrograms ) {\n\t\t\t// Begin our ajax call\n\t\t\t$.ajax( {\n\t\t\t\ttype: 'POST',\n\t\t\t\turl: NuAjaxObject.ajax_url,\n\t\t\t\tdata: {\n\t\t\t\t\tdegree: degree,\n\t\t\t\t\tmodifyPrograms: modifyPrograms,\n\t\t\t\t\taction: 'degree_select'\n\t\t\t\t},\n\t\t\t\tsuccess: function( programs ) { // The WP PHP AJAX action returns a list of programs as a string.\n\n\t\t\t\t\t// Enable the select after populated\n\t\t\t\t\t$( '.program--select select' ).prop( 'disabled', false );\n\n\t\t\t\t\t// Make it so user knows it's ready\n\t\t\t\t\t$( '.program--select' ).removeClass( 'disabled' );\n\n\t\t\t\t\tswitch ( repeat ) {\n\n\t\t\t\t\t\t// First time\n\t\t\t\t\t\tcase 'initial':\n\n\t\t\t\t\t\t\t// Remove all previously added programs as options from \"Degree Program\" select\n\t\t\t\t\t\t\t$( '.program--select select' ).find( 'option:not([disabled=\"disabled\"])' ).remove();\n\n\t\t\t\t\t\t\t// Add all of our program posts as options to the \"Degree Program\" select\n\t\t\t\t\t\t\t$( programs ).appendTo( '.program--select select' );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t// Every other time\n\t\t\t\t\t\tcase 'repeat':\n\n\t\t\t\t\t\t\t// Add all of our program posts as options to the \"Degree Program\" select\n\t\t\t\t\t\t\t$( programs ).appendTo( '.program--select select' );\n\n\t\t\t\t\t\t\t// Choose our previously chosen program, before the form re-rendered after failed validation\n\t\t\t\t\t\t\t$( '.program--select select' ).val( program );\n\n\t\t\t\t\t\t\tsetActiveClass();\n\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( true === modifyPrograms ) {\n\t\t\t\t\t\t$( '.program--select select' ).append( '<optgroup label=\"\" class=\"d-none\"></optgroup>' );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\t\t};\n\n\t\t/**\n\t\t * Event handler for whenever the Program Type dropdown option is selected\n\t\t *\n\t\t * Gets and sets the program value as a variable for use in our gform_post_render function\n\t\t */\n\t\t// Set global variable\n\t\tvar program;\n\n\t\t// When a program is selected\n\t\t$( document ).on( 'change', '.program--select select', function() {\n\n\t\t\t// Store that program's value in the variable for use elsewhere\n\t\t\tprogram = $( '.program--select select' ).val();\n\n\t\t} );\n\n\t\t/**\n\t\t * Event handler for whenever the Degree Type dropdown is changed is rendered on the page\n\t\t *\n\t\t * Where all the magic happens.\n\t\t */\n\t\t$( document ).on( 'change', '.degree--select select', function() {\n\n\t\t\t// If body has this class, set the var to true so we can modify the program names.\n\t\t\tif ( $( 'body' ).hasClass( 'modify-true' ) ) {\n\t\t\t\tmodifyPrograms = true;\n\t\t\t}\n\n\t\t\t// Disable the select while ajax is running\n\t\t\t$( '.program--select select' ).prop( 'disabled', true );\n\n\t\t\t// Make it so user knows something is happening\n\t\t\t$( '.program--select' ).addClass( 'disabled' );\n\n\t\t\t// Get the value selected\n\t\t\tvar degree = $( this ).children( 'option' ).filter( ':selected' ).text();\n\n\t\t\t// Remove all previously added programs as options from \"Degree Program\" select\n\t\t\t$( '.program--select select' ).find( 'option:not([disabled=\"disabled\"])' ).remove();\n\n\t\t\t// Call our ajax function\n\t\t\tdegreeSelect( degree, 'initial', modifyPrograms );\n\n\t\t} );\n\n\t\t/**\n\t\t * Event handler for whenever the Gravity Form is rendered on the page\n\t\t *\n\t\t * Allows us to set inputs as active, run our ajax functions, etc.\n\t\t * Especially helpful for returning form code after a failed validation.\n\t\t */\n\t\t$( document ).on( 'gform_post_render', function( e, formId ) {\n\n\t\t\t// Stop form from re-submitting after hitting back button in browser\n\t\t\t$( '#gform_ajax_frame_' + formId ).attr( 'src', 'about:blank' );\n\n\t\t\t// Get the option selected\n\t\t\tvar degree = $( '.degree--select select option:selected' ).val();\n\n\t\t\tdegreeSelect( degree, 'repeat', modifyPrograms );\n\n\t\t\t$( '.gfield_error input, .gfield_error select' ).attr( 'aria-invalid', 'true' );\n\t\t} );\n\n\t} );\n} )( window, document, jQuery );\n","( function( document, $ ) {\n\tvar isoCodeField     = $( '.iso-country-code input, input.iso-country-code' );\n\tvar countryNameField = $( '.country-name input, input.country-name' );\n\tif ( isoCodeField.length || countryNameField.length ) {\n\t\t/**\n\t\t * Event handler for whenever the Country Code dropdown is changed\n\t\t */\n\t\t$( document ).on( 'change', '.country-code--select select', function() {\n\t\t\tvar selectedCountry = $( this ).children( 'option' ).filter( ':selected' );\n\n\t\t\tvar isoCode     = selectedCountry.data( 'iso-country-code' );\n\t\t\tvar countryName = selectedCountry.data( 'country-name' );\n\n\t\t\t// Populate the corresponding fields.\n\t\t\tif ( isoCodeField.length ) {\n\t\t\t\tisoCodeField.val( isoCode );\n\t\t\t}\n\n\t\t\tif ( countryNameField.length ) {\n\t\t\t\tcountryNameField.val( countryName );\n\t\t\t}\n\n\t\t\t// Auto populate the zipcode field if it's another country other than USA.\n\t\t\tvar zipcodeWrapper = $( '.form__group--zip' );\n\t\t\tif ( zipcodeWrapper.length && ( 'US' !== isoCode || 'USA' !== countryName ) ) {\n\t\t\t\tzipcodeWrapper.find( 'input' ).val( '00000' );\n\t\t\t\tzipcodeWrapper.addClass( 'form__group--active' );\n\t\t\t} else if ( zipcodeWrapper.length ) {\n\t\t\t\tzipcodeWrapper.find( 'input' ).val( '' );\n\t\t\t\tzipcodeWrapper.removeClass( 'form__group--active' );\n\t\t\t}\n\t\t} );\n\t}\n\n\t// Set the country\n\t$( '.country--select select' ).val( 'USA' ).change();\n\n\t// Set the country code AFTER we add the on change behavior so it actually triggers.\n\t$( '.country-code--select select' ).val( '1' ).change();\n} )( document, jQuery );\n","/* eslint-disable no-unused-vars */\n/**\n * Utility Classes\n */\n function hasClass( el, className ) {\n\treturn el.classList ? el.classList.contains( className ) : new RegExp( '\\\\b' + className + '\\\\b' ).test( el.className );\n}\n\nfunction addClass( el, className ) {\n\tif ( el.classList ) {\n\t\tel.classList.add( className );\n\t} else if (\t! hasClass( el, className ) ) {\n\t\tel.className += ' ' + className;\n\t}\n}\n\nfunction removeClass( el, className ) {\n\tif ( el.classList ) {\n\t\tel.classList.remove( className );\n\t} else {\n\t\tel.className = el.className.replace( new RegExp( '\\\\b' + className + '\\\\b', 'g' ), '' );\n\t}\n}\n\n/**\n * Re-Usable check for setting form labels to active state\n *\n * Loops through all fields and checks for value, if value, sets form field to active via class\n */\nfunction setActiveClass() {\n\tvar fieldWrappers = document.querySelectorAll( '.gform_fields li' );\n\n\tfieldWrappers.forEach( function( element ) {\n\t\tvar fieldInput = element.querySelector( 'input' );\n\t\tif ( fieldInput && fieldInput.value ) {\n\t\t\taddClass( element, 'form__group--active' );\n\t\t}\n\n\t\tvar fieldSelect = element.querySelector( 'select' );\n\t\tif ( fieldSelect && fieldSelect.value ) {\n\t\t\taddClass( element, 'form__group--active' );\n\t\t}\n\t} );\n}\n\n( function( $ ) {\n\t/**\n\t * Adds spinning icon to submit button\n\t *\n\t * Changes submit button icon class to add a rotating spinner so user knows something is happening\n\t */\n\n\t// When click the form submit button\n\t$( document ).on( 'click', '.gform_footer button', function() {\n\n\t\t// Remove the class that shows the arrow\n\t\t$( this ).removeClass( 'icon--arrow-right' );\n\n\t\t// Add the class that shows the spinning icon\n\t\t$( this ).addClass( 'icon--spin' );\n\n\t\t// Get the value of the default RFI form\n\t\tvar trackInput = $( '#gform_1 li.track input' ).val();\n\n\t\t// If the value is empty\n\t\tif ( trackInput === '' ) {\n\n\t\t\t// Set it manually\n\t\t\t$( '#gform_1 li.track input' ).val( 'rfi_nu.edu' );\n\t\t}\n\t} );\n} )( jQuery );\n\n/* global NuAjaxObject, degreeSelect, setActiveClass */\n( function( window, document, $ ) {\n\t$( function() {\n\t\t// Var used by optimizely. If set to true, will create a change in how\n\t\t// the programs are displayed in the ajax function degreeSelect().\n\t\tvar modifyPrograms;\n\n\t\t/**\n\t\t* Re-usable Ajax function for our degree types select\n\t\t*\n\t\t* Based on the value of the degree type select, we need to populate our degree program select with the corresponding options.\n\t\t* It accepts two parameters, \"degree\" which is the value of the degree type select, and \"repeat\", which modifies some actions\n\t\t* on success, since we may not want to completely remove all the options every time.\n\t\t*/\n\t\twindow.degreeSelect = function( degree, repeat, modifyPrograms ) {\n\t\t\t// Begin our ajax call\n\t\t\t$.ajax( {\n\t\t\t\ttype: 'POST',\n\t\t\t\turl: NuAjaxObject.ajax_url,\n\t\t\t\tdata: {\n\t\t\t\t\tdegree: degree,\n\t\t\t\t\tmodifyPrograms: modifyPrograms,\n\t\t\t\t\taction: 'degree_select'\n\t\t\t\t},\n\t\t\t\tsuccess: function( programs ) { // The WP PHP AJAX action returns a list of programs as a string.\n\n\t\t\t\t\t// Enable the select after populated\n\t\t\t\t\t$( '.program--select select' ).prop( 'disabled', false );\n\n\t\t\t\t\t// Make it so user knows it's ready\n\t\t\t\t\t$( '.program--select' ).removeClass( 'disabled' );\n\n\t\t\t\t\tswitch ( repeat ) {\n\n\t\t\t\t\t\t// First time\n\t\t\t\t\t\tcase 'initial':\n\n\t\t\t\t\t\t\t// Remove all previously added programs as options from \"Degree Program\" select\n\t\t\t\t\t\t\t$( '.program--select select' ).find( 'option:not([disabled=\"disabled\"])' ).remove();\n\n\t\t\t\t\t\t\t// Add all of our program posts as options to the \"Degree Program\" select\n\t\t\t\t\t\t\t$( programs ).appendTo( '.program--select select' );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t// Every other time\n\t\t\t\t\t\tcase 'repeat':\n\n\t\t\t\t\t\t\t// Add all of our program posts as options to the \"Degree Program\" select\n\t\t\t\t\t\t\t$( programs ).appendTo( '.program--select select' );\n\n\t\t\t\t\t\t\t// Choose our previously chosen program, before the form re-rendered after failed validation\n\t\t\t\t\t\t\t$( '.program--select select' ).val( program );\n\n\t\t\t\t\t\t\tsetActiveClass();\n\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( true === modifyPrograms ) {\n\t\t\t\t\t\t$( '.program--select select' ).append( '<optgroup label=\"\" class=\"d-none\"></optgroup>' );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\t\t};\n\n\t\t/**\n\t\t * Event handler for whenever the Program Type dropdown option is selected\n\t\t *\n\t\t * Gets and sets the program value as a variable for use in our gform_post_render function\n\t\t */\n\t\t// Set global variable\n\t\tvar program;\n\n\t\t// When a program is selected\n\t\t$( document ).on( 'change', '.program--select select', function() {\n\n\t\t\t// Store that program's value in the variable for use elsewhere\n\t\t\tprogram = $( '.program--select select' ).val();\n\n\t\t} );\n\n\t\t/**\n\t\t * Event handler for whenever the Degree Type dropdown is changed is rendered on the page\n\t\t *\n\t\t * Where all the magic happens.\n\t\t */\n\t\t$( document ).on( 'change', '.degree--select select', function() {\n\n\t\t\t// If body has this class, set the var to true so we can modify the program names.\n\t\t\tif ( $( 'body' ).hasClass( 'modify-true' ) ) {\n\t\t\t\tmodifyPrograms = true;\n\t\t\t}\n\n\t\t\t// Disable the select while ajax is running\n\t\t\t$( '.program--select select' ).prop( 'disabled', true );\n\n\t\t\t// Make it so user knows something is happening\n\t\t\t$( '.program--select' ).addClass( 'disabled' );\n\n\t\t\t// Get the value selected\n\t\t\tvar degree = $( this ).children( 'option' ).filter( ':selected' ).text();\n\n\t\t\t// Remove all previously added programs as options from \"Degree Program\" select\n\t\t\t$( '.program--select select' ).find( 'option:not([disabled=\"disabled\"])' ).remove();\n\n\t\t\t// Call our ajax function\n\t\t\tdegreeSelect( degree, 'initial', modifyPrograms );\n\n\t\t} );\n\n\t\t/**\n\t\t * Event handler for whenever the Gravity Form is rendered on the page\n\t\t *\n\t\t * Allows us to set inputs as active, run our ajax functions, etc.\n\t\t * Especially helpful for returning form code after a failed validation.\n\t\t */\n\t\t$( document ).on( 'gform_post_render', function( e, formId ) {\n\n\t\t\t// Stop form from re-submitting after hitting back button in browser\n\t\t\t$( '#gform_ajax_frame_' + formId ).attr( 'src', 'about:blank' );\n\n\t\t\t// Get the option selected\n\t\t\tvar degree = $( '.degree--select select option:selected' ).val();\n\n\t\t\tdegreeSelect( degree, 'repeat', modifyPrograms );\n\n\t\t\t$( '.gfield_error input, .gfield_error select' ).attr( 'aria-invalid', 'true' );\n\t\t} );\n\n\t} );\n} )( window, document, jQuery );\n\n( function( document, $ ) {\n\tvar isoCodeField     = $( '.iso-country-code input, input.iso-country-code' );\n\tvar countryNameField = $( '.country-name input, input.country-name' );\n\tif ( isoCodeField.length || countryNameField.length ) {\n\t\t/**\n\t\t * Event handler for whenever the Country Code dropdown is changed\n\t\t */\n\t\t$( document ).on( 'change', '.country-code--select select', function() {\n\t\t\tvar selectedCountry = $( this ).children( 'option' ).filter( ':selected' );\n\n\t\t\tvar isoCode     = selectedCountry.data( 'iso-country-code' );\n\t\t\tvar countryName = selectedCountry.data( 'country-name' );\n\n\t\t\t// Populate the corresponding fields.\n\t\t\tif ( isoCodeField.length ) {\n\t\t\t\tisoCodeField.val( isoCode );\n\t\t\t}\n\n\t\t\tif ( countryNameField.length ) {\n\t\t\t\tcountryNameField.val( countryName );\n\t\t\t}\n\n\t\t\t// Auto populate the zipcode field if it's another country other than USA.\n\t\t\tvar zipcodeWrapper = $( '.form__group--zip' );\n\t\t\tif ( zipcodeWrapper.length && ( 'US' !== isoCode || 'USA' !== countryName ) ) {\n\t\t\t\tzipcodeWrapper.find( 'input' ).val( '00000' );\n\t\t\t\tzipcodeWrapper.addClass( 'form__group--active' );\n\t\t\t} else if ( zipcodeWrapper.length ) {\n\t\t\t\tzipcodeWrapper.find( 'input' ).val( '' );\n\t\t\t\tzipcodeWrapper.removeClass( 'form__group--active' );\n\t\t\t}\n\t\t} );\n\t}\n\n\t// Set the country\n\t$( '.country--select select' ).val( 'USA' ).change();\n\n\t// Set the country code AFTER we add the on change behavior so it actually triggers.\n\t$( '.country-code--select select' ).val( '1' ).change();\n} )( document, jQuery );\n\n\n/* global setActiveClass */\njQuery( document ).ready( function( $ ) {\n\n\t/**\n\t * Default year and month and country for forms\n\t *\n\t * Auto populates month and year selects with current month and year, country select with USA\n\t */\n\n\t// Create array of month names\n\tvar monthNames = [ 'JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUNE', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC' ];\n\n\t// Create a new date var\n\tvar d = new Date();\n\n\t// Get the month number, correspond to our array data\n\tvar n = monthNames[ d.getMonth() ];\n\n\t// Get the year\n\tvar y = d.getFullYear();\n\n\t// Set the month\n\t$( '.form__group--month select' ).val( n ).change();\n\n\t// Set the year\n\t$( '.form__group--year select' ).val( y ).change();\n\n\t// Check for active fields first, so it doesn't look terrible\n\tsetActiveClass();\n\n\t/**\n\t * Event handler for FireFox autofill form event\n\t *\n\t * Sets labels to active state when form is autofilled by the browser\n\t */\n\t$( 'input' ).bind( 'input', function() {\n\t\t$( this ).closest( 'li' ).addClass( 'form__group--active' );\n\t} );\n\n\t$( 'select' ).bind( 'select', function() {\n\t\t$( this ).closest( 'li' ).addClass( 'form__group--active' );\n\t} );\n} );\n"]}